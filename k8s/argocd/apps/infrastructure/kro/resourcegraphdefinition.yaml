apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: front-application
spec:
  # kro uses this simple schema to create your CRD schema and apply it
  # The schema defines what users can provide when they instantiate the RGD (create an instance).
  schema:
    apiVersion: v1alpha1
    kind: Application
    spec:
      # Spec fields that users can provide.
      name: string
      image: string | default="nginx"
      ingress:
        enabled: boolean | default=false
        ingressport: integer | default=80
      containerport: integer | default=80
      service:
        enabled: boolean | default=true
        serviceport: integer | default=80
        protocol: string | default="TCP"
      namespace: string | default="default" # dónde crear los objetos
      replicas: integer | default=1 # réplicas fijas
      autoscaling: # activar HPA / KEDA
        enabled: boolean | default=false
        minReplicas: integer | default=1
        maxReplicas: integer | default=5
        cpu: integer | default=80 # % CPU HPA
    #        keda: # opcional, ejemplo RabbitMQ
    #          queueName: string
    #          queueLength: integer | default=30
    status: {}

  # Define the resources this API will manage.
  resources:
    - id: deployment
      # Deployment stays the same
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}
          namespace: ${schema.spec.namespace}
        spec:
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image}
                  ports:
                    - containerPort: ${schema.spec.containerport}

    - id: service
      # Service stays the same
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-service
        spec:
          selector: ${deployment.spec.selector.matchLabels}
          ports:
            - protocol: ${schema.spec.service.protocol}
              port: ${schema.spec.service.serviceport}
              targetPort: ${schema.spec.containerport}

    # Updated HPA resource with proper conditions
    - id: hpa
      includeWhen:
        - ${schema.spec.autoscaling != null && schema.spec.autoscaling.enabled == true}
      template:
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: ${schema.spec.name}-hpa
          namespace: ${schema.spec.namespace}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: ${deployment.metadata.name}
          minReplicas:
            ${schema.spec.autoscaling != null ? schema.spec.autoscaling.minReplicas: 1}
          maxReplicas:
            ${schema.spec.autoscaling != null ? schema.spec.autoscaling.maxReplicas: 5}
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization:
                    ${schema.spec.autoscaling != null ? schema.spec.autoscaling.cpu: 80}

    # Updated ScaledObject resource with proper conditions
    - id: scaledobject
      includeWhen:
        - ${schema.spec.autoscaling != null && schema.spec.autoscaling.enabled == true}
      template:
        apiVersion: keda.sh/v1alpha1
        kind: ScaledObject
        metadata:
          name: ${schema.spec.name}-scaledobject
          namespace: ${schema.spec.namespace}
        spec:
          scaleTargetRef:
            name: ${deployment.metadata.name}
          minReplicaCount:
            ${schema.spec.autoscaling != null ? schema.spec.autoscaling.minReplicas: 1}
          maxReplicaCount:
            ${schema.spec.autoscaling != null ? schema.spec.autoscaling.maxReplicas: 5}
#    - id: ingress
#      includeWhen:
#        - ${schema.spec.ingress.enabled} # Only include if the user wants to create an Ingress
#      template:
#        apiVersion: networking.k8s.io/v1
#        kind: Ingress
#        metadata:
#          name: ${schema.spec.name}-ingress
#          annotations:
#            kubernetes.io/ingress.class: alb
#            alb.ingress.kubernetes.io/scheme: internet-facing
#            alb.ingress.kubernetes.io/target-type: ip
#            alb.ingress.kubernetes.io/healthcheck-path: /health
#            alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
#            alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
#        spec:
#          rules:
#            - http:
#                paths:
#                  - path: "/"
#                    pathType: Prefix
#                    backend:
#                      service:
#                        name: ${service.metadata.name} # Use the service name
#                        port:
#                          number: ${service.metadata.ingressport} # Use the service port
