# .github/workflows/terraform-destroy.yml
name: Terraform Destroy
on: { workflow_dispatch: {} }

permissions:
  id-token: write        # OIDC
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: poc
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      TF_INPUT:            "false"

    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: infra
        run: terraform init -upgrade

      # 1) Desinstalar el chart de ingress
      - name: Destroy helm_release.nginx_ingress
        working-directory: infra
        run: terraform destroy -target=helm_release.nginx_ingress -auto-approve

      # 2) Esperar a que Azure libere la IP
      - name: Esperar que la IP quede sin asociación
        run: |
          IP_RG="MC_RG-poc-iac_CK-poc-iac_eastus"
          IP_NAME="nginx-ingress-pip"
          echo "Esperando a que $IP_NAME quede Unassigned…"
          az network public-ip wait \
            --resource-group "$IP_RG" \
            --name "$IP_NAME" \
            --is-null --query "ipConfiguration.id" \
            --interval 30 --timeout 900

      # 3) Destruir el resto de la infraestructura
      - name: Terraform Destroy restante
        working-directory: infra
        run: terraform destroy -auto-approve
